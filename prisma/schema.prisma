// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ----------------------------------------------------
// 1. Enum 정의
// ----------------------------------------------------

// 매칭 요청 상태
enum MatchStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// ----------------------------------------------------
// 2. Main Models
// ----------------------------------------------------

// TimeSlot (수업 정보) 모델
model TimeSlot {
  id          Int      @id @default(autoincrement()) 
  subject     String   // 과목명
  location    String?  // 강의실
  professor   String?  // 교수명
  
  // FreeTimeSlot 필드 (인라인으로 분리)
  day         Int
  startTime   Float
  endTime     Float

  // User 관계 설정: TimeSlot은 User에 속함 (N:1)
  userId      Int
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId]) 
}

// User 모델
model User {
  id              Int            @id @default(autoincrement())
  name            String
  department      String
  grade           Int
  email           String         @unique 
  password        String         
  bio             String?        
  avatar          String?        

  // TimeSlot 관계: User가 소유한 모든 수업 시간표
  timetable       TimeSlot[]

  // 선호 설정: SQLite는 Composite Type을 지원하지 않으므로 JSON 문자열로 저장합니다.
  // 코드에서 JSON.stringify/JSON.parse를 사용해야 합니다.
  preferencesJson String         @default("{ \"mealTimes\": [], \"locations\": [], \"foodTypes\": [] }") @map("preferences")

  // MatchRequest 관계: 사용자가 보냈거나 받은 매칭 요청
  sentRequests    MatchRequest[] @relation("SentMatches")
  receivedRequests MatchRequest[] @relation("ReceivedMatches")

  @@map("users") // 테이블명 명시
}

// MatchRequest 모델
model MatchRequest {
  id              Int           @id @default(autoincrement())
  
  // From User (요청을 보낸 사용자)
  fromUserId      Int
  fromUser        User          @relation("SentMatches", fields: [fromUserId], references: [id])

  // To User (요청을 받은 사용자)
  toUserId        Int
  toUser          User          @relation("ReceivedMatches", fields: [toUserId], references: [id])
  
  // 제안된 시간: FreeTimeSlot 구조가 JSON 문자열로 저장됩니다.
  proposedTimeJson String        @map("proposedTime") 

  message         String?
  status          MatchStatus   @default(PENDING)
  createdAt       DateTime      @default(now())

  @@index([fromUserId])
  @@index([toUserId])
  @@map("match_requests")
}
